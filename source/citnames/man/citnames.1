.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "CITNAMES" "1" "Sep 14, 2020" "Bear User Manuals" ""
.hy
.SH NAME
.PP
citnames - Deduce command semantic
.SH SYNOPSIS
.PP
citnames [\f[I]options\f[R]] --input <file> --output <file>
.SH DESCRIPTION
.PP
The name citnames comes from to reverse the word \[lq]semantic\[rq].
.PP
Because when you type a command, you know your intent.
The command execution is just a thing to achieve your goal.
This program takes the command which was executed, and try to find out
what the intent was to run that command.
It deduces the semantic of the command.
.PP
This is useful to generate a compilation database.
Citnames get a list of commands, and it creates a JSON compilation
database.
(This is currently the only output of the tool.)
.SH OPTIONS
.TP
--version
Print version number.
.TP
--help
Print help message.
.TP
--verbose
Enable verbose logging.
.TP
--input \f[I]file\f[R]
Specify input file.
(Default file name provided.) The input is a command execution list,
with some extra information.
The syntax is detailed in a separate section.
.TP
--output \f[I]file\f[R]
Specify output file.
(Default file name provided.) The output is currently a JSON compilation
database.
.TP
--append
Use previously generated output file and append the new entries to it.
This way you can run continuously during work, and it keeps the
compilation database up to date.
File deletion and addition are both considered.
But build process change (compiler flags change) might cause duplicate
entries.
.TP
--run-checks
Allow the program to verify file location checks on the current machine
it runs.
(Default value provided.
Run help to query it.) This is important if the execution list is not
from the current host.
.TP
--config \f[I]file\f[R]
Specify a configuration file.
The configuration file captures how the output should be formatted and
which entries it shall contain.
.SH EXIT STATUS
.PP
Citnames exit status is non zero in case of IO problems, otherwise
it\[cq]s zero.
The exit status is independent from how many command it recognized or
was it recognized at all.
.SH OBSERVABILITY
.PP
Any insight about the command recognition logic can be observed with
\f[C]--verbose\f[R] flag on the standard error.
Otherwise the command is silent.
.SH INPUT FILE
.PP
It\[cq]s a JSON file, with the command execution history.
(Plus some metadata, that is useful for debugging the application which
was produced it.) This file can be produced by the \f[C]intercept\f[R]
command, which records the process executions of a build.
.PP
Read more about the syntax of the file in the \f[C]intercept\f[R] man
page.
.SH OUTPUT FILE
.PP
Currently the only output format is the JSON compilation database.
Read more about the syntax of that in the \f[C]bear\f[R] man page.
.SH CONFIG FILE
.PP
The config file influences the command recognition (by the section
\[lq]compilation\[rq]) and the output format (by the section
\[lq]output\[rq]).
.PP
The config file is optional.
The program will use default values, which can be dumped with the
\f[C]--verbose\f[R] flags.
.PP
Some parts of the file has overlap with the command line arguments.
If both present the command line argument overrides the config file
values.
.IP
.nf
\f[C]
{
  \[dq]compilation\[dq]: {
    \[dq]compilers_to_recognize\[dq]: [
      {
        \[dq]executable\[dq]: \[dq]/usr/bin/mpicc\[dq],
        \[dq]additional_flags\[dq]: [\[dq]-I/opt/MPI/include\[dq]]
      }
    ],
    \[dq]compilers_to_exclude\[dq]: []
  },
  \[dq]output\[dq]: {
    \[dq]content\[dq]: {
      \[dq]include_only_existing_source\[dq]: true,
      \[dq]paths_to_include\[dq]: [],
      \[dq]paths_to_exclude\[dq]: []
    },
    \[dq]format\[dq]: {
      \[dq]command_as_array\[dq]: true,
      \[dq]drop_output_field\[dq]: false
    }
  }
}
\f[R]
.fi
.TP
\f[B]\f[CB]compilation.compilers_to_recognize\f[B]\f[R]
where compiler can be specified, which are not yet recognized by
default.
The \f[C]executable\f[R] is an absolute path to the compiler.
The \f[C]additional_flags\f[R] is an optional attribute, which contains
flags which will append to the final output.
(It\[cq]s a good candidate to use this for adding OpenMPI compiler
wrapper flags from the \f[C]mpicc --showme:compile\f[R] output.)
.TP
\f[B]\f[CB]compilation.compilers_to_exclude\f[B]\f[R]
this is an optional list of executables (with absolute path) which needs
to be removed from the output.
.TP
\f[B]\f[CB]output.content\f[B]\f[R]
The \f[C]paths_to_include\f[R] and \f[C]paths_to_exclude\f[R] are for
filter out entries from these directories.
(Directory names has to be absolute paths.) The
\f[C]include_only_existing_source\f[R] allows or disables file check for
the output.
.TP
\f[B]\f[CB]output.format\f[B]\f[R]
The \f[C]command_as_array\f[R] controls which command field is emitted
in the output.
True produces \f[C]arguments\f[R], false produces \f[C]command\f[R]
field.
The \f[C]drop_output_field\f[R] will disable the \f[C]output\f[R] field
from the output.
.SH SEE ALSO
.PP
bear(1), intercept(1)
.SH COPYRIGHT
.PP
Copyright (C) 2012-2021 by L\['a]szl\['o] Nagy
<https://github.com/rizsotto/Bear>
.SH AUTHORS
L\['a]szl\['o] Nagy.
